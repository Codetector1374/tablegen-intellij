/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cn.codetector.tablegenintellij.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static cn.codetector.tablegenintellij.psi.TableGenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TableGenLexer.flex</tt>
 */
public class _TableGenLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\2\2\4\1\3\22\0\1\5\1\0\1\14\1\0\1\12\5\0\1\7\4\0\1\6\12\10\7\0"+
    "\32\11\1\17\1\15\1\22\1\0\1\11\1\0\1\30\1\13\1\26\1\32\1\33\1\35\1\34\1\37"+
    "\1\23\2\11\1\27\1\40\1\16\1\31\2\11\1\36\1\25\1\24\1\41\5\11\1\20\1\0\1\21"+
    "\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\4"+
    "\2\1\7\4\1\5\1\0\1\6\1\4\1\0\1\7"+
    "\2\0\1\10\12\4\1\0\1\11\1\7\1\0\1\12"+
    "\5\4\1\13\1\14\1\15\3\4\1\5\1\16\1\0"+
    "\3\4\1\17\1\20\1\21\3\4\1\0\2\4\1\22"+
    "\1\23\2\4\1\24\1\4\1\25\2\4\1\26\1\27"+
    "\3\4\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u0110\0\42\0\u02ca"+
    "\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da"+
    "\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u0110\0\u04c8"+
    "\0\252\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\252\0\252"+
    "\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u0264\0\252\0\u061c\0\u063e"+
    "\0\u0660\0\u0682\0\252\0\252\0\252\0\u06a4\0\u06c6\0\u06e8"+
    "\0\u070a\0\u072c\0\u074e\0\252\0\252\0\u0770\0\u0792\0\42"+
    "\0\u07b4\0\252\0\u07d6\0\u07f8\0\252\0\252\0\u081a\0\u083c"+
    "\0\u085e\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\4\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\6\1\12\3\2\1\13\1\6\1\14"+
    "\1\15\1\16\2\6\1\17\2\6\1\20\2\6\1\21"+
    "\1\6\44\0\4\3\42\0\1\22\1\23\42\0\1\5"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\17\6\10\0"+
    "\2\6\1\0\1\6\2\0\1\6\4\0\17\6\11\0"+
    "\1\24\1\0\1\24\2\0\1\24\4\0\17\24\10\0"+
    "\2\6\1\0\1\6\2\0\1\6\4\0\1\25\16\6"+
    "\2\26\2\0\10\26\1\27\1\30\24\26\20\0\1\31"+
    "\31\0\2\6\1\0\1\6\2\0\1\32\4\0\17\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\1\6"+
    "\1\33\15\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\4\6\1\34\1\6\1\35\10\6\10\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\1\36\7\6\1\37"+
    "\6\6\10\0\2\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\40\2\6\1\41\6\6\10\0\2\6\1\0"+
    "\1\6\2\0\1\6\4\0\1\42\5\6\1\43\10\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\16\6"+
    "\1\44\1\22\4\0\35\22\1\23\1\0\1\23\2\0"+
    "\2\23\1\45\32\23\10\0\2\24\1\0\1\24\2\0"+
    "\1\24\4\0\17\24\10\0\2\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\6\1\46\15\6\2\26\2\0\10\26"+
    "\1\47\1\30\24\26\42\50\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\6\1\51\1\6\1\52\13\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\53\3\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\5\6\1\54\11\6\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\7\6\1\55\7\6\10\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\2\6\1\56\14\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\1\6"+
    "\1\57\15\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\11\6\1\60\5\6\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\12\6\1\61\4\6\10\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\10\6\1\62\6\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\63\3\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\4\6\1\64\12\6\1\23\1\0\1\23\2\0"+
    "\1\23\1\65\1\45\32\23\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\2\6\1\66\14\6\21\0\1\67"+
    "\30\0\2\6\1\0\1\6\2\0\1\6\4\0\4\6"+
    "\1\70\12\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\1\71\16\6\10\0\2\6\1\0\1\6\2\0"+
    "\1\6\4\0\2\6\1\72\14\6\10\0\2\6\1\0"+
    "\1\6\2\0\1\6\4\0\10\6\1\73\6\6\10\0"+
    "\2\6\1\0\1\6\2\0\1\6\4\0\1\6\1\74"+
    "\15\6\10\0\2\6\1\0\1\6\2\0\1\6\4\0"+
    "\15\6\1\75\1\6\10\0\2\6\1\0\1\6\2\0"+
    "\1\6\4\0\4\6\1\76\12\6\10\0\2\6\1\0"+
    "\1\6\2\0\1\6\4\0\10\6\1\77\6\6\10\0"+
    "\2\6\1\0\1\6\2\0\1\6\4\0\1\6\1\100"+
    "\15\6\21\0\1\101\1\67\27\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\16\6\1\102\10\0\2\6\1\0"+
    "\1\6\2\0\1\103\4\0\17\6\10\0\2\6\1\0"+
    "\1\6\2\0\1\6\4\0\2\6\1\104\14\6\10\0"+
    "\2\6\1\0\1\6\2\0\1\6\4\0\7\6\1\105"+
    "\7\6\10\0\2\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\106\11\6\10\0\2\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\107\16\6\22\0\1\110\27\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\7\6\1\111\7\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\11\6"+
    "\1\112\5\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\3\6\1\113\13\6\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\3\6\1\114\13\6\10\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\10\6\1\115\6\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\14\6"+
    "\1\116\2\6\10\0\2\6\1\0\1\6\2\0\1\6"+
    "\4\0\4\6\1\117\12\6\10\0\2\6\1\0\1\6"+
    "\2\0\1\6\4\0\5\6\1\120\11\6\10\0\2\6"+
    "\1\0\1\6\2\0\1\6\4\0\2\6\1\121\14\6"+
    "\10\0\2\6\1\0\1\6\2\0\1\6\4\0\2\6"+
    "\1\122\14\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\0\2\1\1\0\1\11\2\0"+
    "\13\1\1\0\2\1\1\0\16\1\1\0\11\1\1\0"+
    "\6\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TableGenLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TableGenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 25: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 26: break;
          case 3: 
            { return DEC_INT;
            } 
            // fall through
          case 27: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 28: break;
          case 5: 
            { return COMMENTS;
            } 
            // fall through
          case 29: break;
          case 6: 
            { return VARNAME;
            } 
            // fall through
          case 30: break;
          case 7: 
            { return STRING;
            } 
            // fall through
          case 31: break;
          case 8: 
            { return KEYWORDIN;
            } 
            // fall through
          case 32: break;
          case 9: 
            { return KEYWORDBIT;
            } 
            // fall through
          case 33: break;
          case 10: 
            { return KEYWORDINT;
            } 
            // fall through
          case 34: break;
          case 11: 
            { return KEYWORDLET;
            } 
            // fall through
          case 35: break;
          case 12: 
            { return KEYWORDDAG;
            } 
            // fall through
          case 36: break;
          case 13: 
            { return KEYWORDDEF;
            } 
            // fall through
          case 37: break;
          case 14: 
            { return KEYWORDBITS;
            } 
            // fall through
          case 38: break;
          case 15: 
            { return KEYWORDCODE;
            } 
            // fall through
          case 39: break;
          case 16: 
            { return KEYWORDLIST;
            } 
            // fall through
          case 40: break;
          case 17: 
            { return KEYWORDDEFM;
            } 
            // fall through
          case 41: break;
          case 18: 
            { return KEYWORDCLASS;
            } 
            // fall through
          case 42: break;
          case 19: 
            { return KEYWORDFIELD;
            } 
            // fall through
          case 43: break;
          case 20: 
            { return CODE_FRAGMENT;
            } 
            // fall through
          case 44: break;
          case 21: 
            { return KEYWORDSTRING;
            } 
            // fall through
          case 45: break;
          case 22: 
            { return KEYWORDINCLUDE;
            } 
            // fall through
          case 46: break;
          case 23: 
            { return KEYWORDFOREACH;
            } 
            // fall through
          case 47: break;
          case 24: 
            { return KEYWORDMULTICLASS;
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
